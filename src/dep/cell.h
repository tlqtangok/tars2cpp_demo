// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 3.0.21.
// **********************************************************************

#ifndef __CELL_H_
#define __CELL_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;


namespace Cell
{
    struct DZLevelInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "Cell.DZLevelInfo";
        }
        static string MD5()
        {
            return "fce0c1bf661dd178fc0479e68364ed29";
        }
        DZLevelInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            level = 2999;
            rate = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            if (level != 2999)
            {
                _os.write(level, 0);
            }
            if (!tars::TC_Common::equal(rate, (float)0))
            {
                _os.write(rate, 1);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(level, 0, false);
            _is.read(rate, 1, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["level"] = tars::JsonOutput::writeJson(level);
            p->value["rate"] = tars::JsonOutput::writeJson(rate);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(level,pObj->value["level"], false);
            tars::JsonInput::readJson(rate,pObj->value["rate"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(level,"level");
            _ds.display(rate,"rate");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(level, true);
            _ds.displaySimple(rate, false);
            return _os;
        }
    public:
        tars::Int32 level;
        tars::Float rate;
    };
    inline bool operator==(const DZLevelInfo&l, const DZLevelInfo&r)
    {
        return l.level == r.level && tars::TC_Common::equal(l.rate,r.rate);
    }
    inline bool operator!=(const DZLevelInfo&l, const DZLevelInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const DZLevelInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,DZLevelInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


}



#endif
